---
layout: default
title: Configuration
---
h2. Setting up project

On the homepage, click "New project" on the menu.

* **Name** should be a globally unique project name like "My Project master"
* **Steps** newline-separated build steps; see the "steps section":#steps for more details
* **Vcs type** version control software you are using. Git is the only choice for now, but you can "contribute with your own VCS handler":contributing.html#vcs
* **Vcs source** the source to the version control repository. Read the "VCS section":#vcs for info
* **Vcs branch** the branch to work on
* **Max builds** BigTuna will keep only latest _max_builds_ builds (default: 10)
* **Hooks** Connect various hooks to project builder. See "hooks section":#hooks for more information
* **Hook name** Set up unique hook name and POST to @http://bigtuna.domain/hooks/build/:name@ to build the app

h3(#steps). Steps

Steps should be newline--separated shell commands which will be executed in order by our builder. Sample Rails 3 step entry might look like this:

bc. bundle install --path=%project_dir%/bundle --deployment
cp /project/shared/database.yml.sample %build_dir%/config/database.yml
bundle exec rake

Please note that @%build_dir%@ and @%project_dir%@ are special variables. If used in a step, they will be replaced with appropriate paths.

p(tip). When building a web app, ensure your production data is safe. Use separate @database.yml@ config file with only test environment entry as an extra precaution. That way you'll make sure other databases aren't accessed during the build process.

h3(#vcs). Version Control

**VCS Source** is the path to your repository. It can either be a local path (like @/my/git/path@) if your repository is locally visible by BigTuna app, or a remote entry (like @your.host:repo.git@). In both cases it __has to be accessible__ by the user which runs your BigTuna application. A remote entry will probably require a passwordless login, so an @id_{r|d}sa.pub@ key has to be present on the remote site.

h3(#hooks). Hooks

Hooks are small code parts that can be executed on various project actions. Currently supported actions are:
* @build_passed(build, config)@ -- invoked when @build@ was successfully ran
* @build_fixed(build, config)@ -- invoked when @build@ fixed the failing project
* @build_still_fails(build, config)@ -- invoked when @build@ didn't fix the project
* @build_finished(build, config)@ -- invoked for every @build@ ran
* @build_failed(build, config)@ -- invoked when @build@ failed a valid project

@config@ in all hooks is a hash of configuration values. You can use it in hook actions to provide custom behaviour based on configuration provided by user.

Currently there is a @Mailer@ hook available, which allows you to send emails to specified recipients.

If you would like to contribute learn "how to write your own hook":contributing.html#hook
